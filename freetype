typedef struct
{
    int width;
    int height;
    gboolean malloc;
    unsigned char * text_alpha;
}Font_Bitmap_Data;
//将字符串转化为unicodeStr
guint16 *GetUnicodeStr(gchar * str, gint * StrLength)
{
    gint len = g_utf8_strlen(str, -1);
    gint i, offset = 0;
    guint Strlen;
    guint16 *TempStr = g_malloc(len * 2);
    guint16 *RetStr;
    gchar *UTF8Str = str;

    for (i = 0; i < len; i++)
    {
        TempStr[offset++] = g_utf8_get_char_validated(UTF8Str, -1);
        UTF8Str = g_utf8_find_next_char(UTF8Str, NULL);
    }

    RetStr = MakePersiaDisplayStr(TempStr, offset, &Strlen);  // other not use
    if (RetStr)
    {
        *StrLength = Strlen;
        g_free(TempStr);
        return RetStr;
    }

    *StrLength = offset;
    return TempStr;
}

gboolean IsIncludeLower(char *str)
{
    int i = 0;
    for (i = 0; i < strlen(str); i++)
    {
        if (g_ascii_islower(*(str+i)))
        {
            return TRUE;
        }
    }
    return FALSE;
}


int Get_Fonts_Bitmap(
char *font_file,             /* 字体文件路径 */
char *in_text,               /* 输入的字符串 */
int fonts_pixel_size,        /* 字体大小 */
int space,                   /* 间距 */
Font_Bitmap_Data *out_fonts  /* 输出的位图数据,Pic_Data是结构体 */
)
/* ****************************************** */
/* 根据传入的字体库路径、字符串、字体尺寸，输 */
/* 出该字符串的位图数组                       */
/* 本函数使用了freetype2的API                 */
/* ****************************************** */
{
    FT_Library         p_FT_Lib = NULL;    /* 库的句柄  */
    FT_Face            p_FT_Face = NULL;      /* face对象的句柄 */
    FT_Error           error = 0;
    FT_Bitmap          bitmap;
    FT_BitmapGlyph     bitmap_glyph;
    FT_Glyph           glyph;
    FT_GlyphSlot       slot;
    int i , j ,temp,num,bg_height;
    char error_str[200];

    error = FT_Init_FreeType( & p_FT_Lib);  /* 初始化FreeType库 */
    if (error)   /* 当初始化库时发生了一个错误 */
    {
        p_FT_Lib = 0 ;
        printf("#####FT_INIT_ERROR\n");
        return -1;
    }
    /* 从字体库文件中获取字体 */
    error = FT_New_Face(p_FT_Lib, font_file , 0 , & p_FT_Face);
    if ( error == FT_Err_Unknown_File_Format )
    {
        printf("######FT_UNKNOWN_FILE_FORMAT\n"); /* 未知文件格式 */
        FT_Done_FreeType(p_FT_Lib);
        return -1;
    }
    else if (error)
    {
        printf("######FT_OPEN_FILE_ERROR\n");/* 打开错误 */
        perror("FreeeType2");
        FT_Done_FreeType(p_FT_Lib);
        return -1;
    }
    j = 0;
    guint16 * unicode_text; /* 用于存储unicode字符 */
    #if 0
    unicode_text = (guint16 *)calloc(1,sizeof(guint16)*(strlen(in_text)*2)); /* 申请内存 */
    if (unicode_text == NULL)
    {
        printf("calloc error in %s %d", __FILE__, __LINE__);
        return -1;
    }
    #endif
    unicode_text = GetUnicodeStr(in_text, &num);

    int start_x = 0,start_y = 0;
    int ch_height = 0,ch_width = 0;
    int k,text_width = 0;
    size_t size = 0;
    unsigned char **text_alpha;
    gboolean bEnglish = SystemIsEnglish();

    if (bEnglish && IsIncludeLower(in_text))
    {
        bg_height = fonts_pixel_size + 5;
    }
    else if (bEnglish)
    {
        bg_height = fonts_pixel_size + 2; /* 背景图形的高度，这个高度要大于字体的高度，所以是+5 */
    }
    else
    {
        bg_height = fonts_pixel_size + 5;
    }
    /* 分配内存，用于存储字体背景图的数据 */
    text_alpha = (unsigned char**)malloc(sizeof(unsigned char*)*bg_height);

    for(i=0;i<bg_height;++i)
    {
        /* 预先为背景图的每一行分配内存 */
        text_alpha[i] = (unsigned char*)malloc(sizeof(unsigned char)*1);
    }

    FT_Select_Charmap(p_FT_Face,FT_ENCODING_UNICODE);   /* 设定为UNICODE，默认的也是 */
    FT_Set_Pixel_Sizes(p_FT_Face,0,fonts_pixel_size);   /* 设定字体大小 */

    slot = p_FT_Face->glyph;
    for(temp=0;temp<num;++temp)
    {
        /* 开始遍历unicode编码的字符串中的每个元素  */
        /* 这个函数只是简单地调用FT_Get_Char_Index和FT_Load_Glyph */
        error = FT_Load_Char( p_FT_Face, unicode_text[temp],  FT_LOAD_RENDER | FT_LOAD_NO_AUTOHINT);

        if(!error){
            /* 从插槽中提取一个字形图像 */
            /* 请注意，创建的FT_Glyph对象必须与FT_Done_Glyph成对使用 */
            error = FT_Get_Glyph(p_FT_Face -> glyph, &glyph);
            if (!error)
            {
                if(unicode_text[temp] == ' ')
                {
                    /* 如果有空格 */
                    k = 0;
                    ch_width   = (fonts_pixel_size - 6) / 2;
                    ch_height  = fonts_pixel_size;
                    text_width = start_x + ch_width;
                    start_y = 0;
                    for(i=0;i<bg_height;++i)
                    {
                        text_alpha[i] = (unsigned char*)realloc(text_alpha[i], sizeof(unsigned char) * text_width);
                        for(j = start_x - space; j < text_width; ++j)
                        {
                            text_alpha[i][j] = 0;
                        }
                    }
                    for ( i = 0 ; i < ch_height; ++i)
                    {
                        for ( j = 0 ; j < ch_width; ++j)
                        {
                            text_alpha[start_y + i][start_x + j] = 0;
                            ++k;
                        }
                    }
                    start_x += (ch_width + space); /* 画笔向右边移动 */
                }
                else{
                    /* 256级灰度字形转换成位图 */
                    FT_Glyph_To_Bitmap(&glyph, FT_RENDER_MODE_NORMAL, 0 ,1);
                    /* FT_RENDER_MODE_NORMAL       这是默认渲染模式，它对应于8位抗锯齿位图。 */
                    bitmap_glyph = (FT_BitmapGlyph)glyph;
                    bitmap = bitmap_glyph->bitmap;
                    k = 0;

                    start_y = fonts_pixel_size - slot->bitmap_top; /* 获取起点的y轴坐标 */
                    if (start_y < 0)
                    {
                        start_y = 0;
                    }

                    if (bitmap.rows > bg_height)
                    {
                        ch_height = fonts_pixel_size;
                    }
                    else
                    {
                        ch_height = bitmap.rows;
                    }

                    if(ch_height+start_y > bg_height)
                    {
                        ch_height = bg_height - start_y;
                    }

                    ch_width = bitmap.width;
                    text_width = start_x + bitmap.width;

                    for(i=0;i<bg_height;++i)
                    {
                    /* 动态扩增存储字体位图的背景图形占用的空间 */
                        text_alpha[i] = (unsigned char*)realloc(text_alpha[i], sizeof(unsigned char) * text_width);
                        for (j = start_x - space; j < text_width; ++j)
                        {
                            if (j < 0)
                            {
                                j = 0;
                            }
                            text_alpha[i][j] = 0; /* 多出来的空间全部置零 */
                        }
                    }
                    /* 开始将字体位图贴到背景图形中 */
                    for(i = 0; i < bg_height; ++i)
                    {
                        for(j = 0; j < ch_width; ++j)
                        {
                            if(i >= start_y && i < start_y + ch_height)
                            {
                           //     if (bitmap.buffer[k] < 0x80)
                           //         bitmap.buffer[k] = 0;
                                /* 如果在字体位图的范围内 */
                                text_alpha[i][start_x + j] = bitmap.buffer[k];
                                ++k;
                            }
                            else
                                text_alpha[i][start_x + j] = 0; /* 否则就置零 */
                        }
                    }
                    start_x += (ch_width+space); /* 画笔向右边移动 */
                }
                 /* 释放字形占用的内存 */
                FT_Done_Glyph(glyph);
                glyph = NULL;
            }
            else
            {
                sprintf(error_str,"FreeType2 error [%d]",error);
                perror(error_str);
            }
        }
        else
        {
            sprintf(error_str,"FreeType2 error [%d]",error);
            perror(error_str);
        }
    }
    /* 释放face占用的内存 */
    FT_Done_Face(p_FT_Face);
    p_FT_Face = NULL;
    /* 释放FreeType Lib占用的内存 */
    FT_Done_FreeType(p_FT_Lib);
    p_FT_Lib = NULL;
    temp = 0;
    out_fonts->width    = text_width;          /* 要输出的位图的宽度 */
    out_fonts->height   = bg_height;           /* 要输出的位图的高度 */


    int lineByte=(text_width + 3) / 4 * 4;

    //out_fonts->width = text_width;
    if(out_fonts->malloc == TRUE)
    {
        free(out_fonts->text_alpha);
        out_fonts->text_alpha = NULL;
    }
    size = sizeof(unsigned char) * lineByte * bg_height;
    out_fonts->text_alpha = (unsigned char*)calloc(1, size);   /* 申请内存用来存储 */
    k = 0;


   int count=0;
    for ( i = 0 ; i < bg_height; ++i)
    {
        for ( j = 0 ; j < text_width; ++j)
        {
            out_fonts->text_alpha[k] = text_alpha[i][j];
            ++k;
        }
        for (count = 0; count < lineByte - text_width; count++)
        {
            out_fonts->text_alpha[k]=0;
            ++k;
        }
    }
    out_fonts->width = lineByte;

    out_fonts->malloc = TRUE;
    /* 释放内存 */
    for(i=0;i<bg_height;++i)
    {
        free(text_alpha[i]);
    }
    free(text_alpha);
    free(unicode_text);
    return 0;
}


